name: Extract boot.7z and Commit

on:
  push:
    # 当 boot.7z 文件被推送到仓库时触发此工作流
    paths:
      - 'boot.7z'
      # 如果 boot.7z 在子目录中，例如 'firmware/boot.7z'，则更改路径：
      # - 'firmware/boot.7z'
  workflow_dispatch:
    # 允许您手动从 GitHub Actions 页面运行此工作流，方便测试

jobs:
  extract_and_commit:
    runs-on: ubuntu-latest # 或者 'windows-latest' 如果你希望在 Windows 环境中解压

    steps:
      - name: Checkout repository # 步骤1: 检出仓库代码
        uses: actions/checkout@v4 # 使用 actions/checkout@v4 确保获取最新代码和所有历史记录

      - name: Install 7-Zip # 步骤2: 安装 7-Zip 解压工具
        # 对于 Ubuntu/Linux runner
        run: |
          sudo apt-get update
          sudo apt-get install p7zip-full -y
        # 对于 Windows runner，可以跳过此步骤，或者使用 Scoop/Chocolatey 安装 7-Zip
        # run: choco install 7zip --no-progress

      - name: Extract boot.7z # 步骤3: 执行解压操作
        # 假设 boot.7z 在仓库根目录
        run: |
          mkdir -p extracted_boot # 创建一个用于存放解压文件的目录
          7z x boot.7z -o./extracted_boot # 将 boot.7z 解压到 extracted_boot 目录
          # 如果 boot.7z 有密码，可以使用 -p 选项：
          # 7z x boot.7z -o./extracted_boot -pYOUR_PASSWORD_HERE

      - name: Configure Git for Commit # 步骤4: 配置 Git 用户信息，以便进行提交
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add and Commit extracted files # 步骤5: 添加并提交解压后的文件
        run: |
          git add extracted_boot # 添加解压后的目录到暂存区
          git diff-index --quiet HEAD || git commit -m "Automated: Extract boot.7z" # 检查是否有实际更改，再提交
          # 上一行命令的解释：
          # git diff-index --quiet HEAD: 检查工作区和索引是否有与HEAD不同的文件
          # || git commit -m "...": 如果有不同 (即有更改)，则执行提交

      - name: Push changes # 步骤6: 推送更改到远程仓库
        # 使用 GITHUB_TOKEN 进行认证。这是 GitHub Actions 自动提供的一个临时令牌。
        run: git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
